package main

import (
    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)

func main() {
    // Create a router without any middleware by default
    router := gin.New()

    {{- range .Middleware }}
    {{- if eq .Scope "global" }}
    // Apply {{ .Name }} middleware globally
    router.Use(middleware.{{ .Name }}())
    {{- end }}
    {{- end }}

    // Initialize repositories
    {{- range .Repositories }}
    {{ lowerFirst .Name }}, err := repositories.New{{ .Name }}(map[string]interface{}{
        {{- range $key, $value := .Settings }}
        "{{ $key }}": {{ printf "%#v" $value }},
        {{- end }}
    })
    if err != nil {
        log.Fatal(err)
    }
    {{- end }}

    // Initialize services
    {{- range .Services }}
    {{ lowerFirst .Name }} := services.New{{ .Name }}(
        {{- range $index, $repo := .Repositories }}
        {{ if $index }}, {{ end }}{{ lowerFirst $repo }},
        {{- end }}
    )
    {{- end }}

    // Initialize handlers
    {{- range .Handlers }}
    {{ lowerFirst .Name }} := handlers.New{{ .Name }}({{ lowerFirst .Service }})
    {{- end }}

    // Register routes
    {{- range .Handlers }}
    {{- $handler := . }}
    {{- range $route := .Routes }}
    // Route: {{ $route.Verb }} {{ $route.Path }}
    router.{{ $route.Verb }}("{{ $route.Path }}",
        {{- range $index, $mw := $route.Middleware }}
        middleware.{{ $mw }}(),
        {{- end }}
        {{ lowerFirst $handler.Name }}.{{ $route.Method }},
    )
    {{- end }}
    {{- end }}

    // Start the server
    log.Println("Starting server on :{{ .Port }}")
    if err := router.Run(":{{ .Port }}"); err != nil {
        log.Fatal(err)
    }
}